{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./header.service\";\nexport let CacheInterceptor = /*#__PURE__*/(() => {\n  class CacheInterceptor {\n    constructor(router, headerService) {\n      this.router = router;\n      this.headerService = headerService;\n      this.cache = new Map();\n    }\n\n    intercept(request, next) {\n      this.headerService.titleReady.emit(false);\n\n      if (request.method !== 'GET') {\n        return next.handle(request);\n      }\n\n      const cachedResponse = this.cache.get(request.url);\n\n      if (cachedResponse) {\n        this.headerService.titleReady.emit(true);\n        return of(cachedResponse);\n      }\n\n      return next.handle(request).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          this.cache.set(request.url, event);\n        }\n      }, err => {\n        if (err instanceof HttpErrorResponse) {\n          this.router.navigate(['not-found']);\n        }\n      }));\n    }\n\n  }\n\n  CacheInterceptor.ɵfac = function CacheInterceptor_Factory(t) {\n    return new (t || CacheInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HeaderService));\n  };\n\n  CacheInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CacheInterceptor,\n    factory: CacheInterceptor.ɵfac\n  });\n  return CacheInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}