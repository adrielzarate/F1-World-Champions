{"ast":null,"code":"import { map, flatMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WorldChampionsService = /*#__PURE__*/(() => {\n  class WorldChampionsService {\n    constructor(http) {\n      this.http = http;\n      this.initialYear = 1950;\n      this.api = 'http://ergast.com/api/f1';\n    }\n\n    getWorldChampions(from, to) {\n      const offset = from - this.initialYear; // 55\n\n      const limit = to - from + 1; // 11\n\n      return this.http.get(`${this.api}/driverStandings/1.json?limit=${limit}&offset=${offset}`).pipe(map(res => {\n        const standingsLists = res['MRData'].StandingsTable.StandingsLists;\n        return standingsLists.map(driver => {\n          return {\n            firstData: driver.season,\n            name: `${driver.DriverStandings[0].Driver.familyName} ${driver.DriverStandings[0].Driver.givenName}`,\n            points: driver.DriverStandings[0].points\n          };\n        });\n      }));\n    }\n\n    getWinnersBySeason(year) {\n      return this.http.get(`${this.api}/${year}/results/1.json`).pipe(map(res => {\n        const races = res['MRData'].RaceTable.Races;\n        return races.map(driver => {\n          return {\n            firstData: driver.raceName,\n            name: `${driver.Results[0].Driver.familyName} ${driver.Results[0].Driver.givenName}`,\n            points: driver.Results[0].points\n          };\n        });\n      }));\n    }\n\n    getChampionRaceName(year) {\n      return this.http.get(`${this.api}/${year}/driverStandings.json`).pipe(map(res => {\n        const championData = res['MRData'].StandingsTable.StandingsLists[0].DriverStandings[0];\n        return championData.Driver.familyName;\n      }), flatMap(championName => this.getLastChampionRace(year, championName)));\n    }\n\n    getLastChampionRace(year, championName) {\n      return this.http.get(`${this.api}/${year}/drivers/${championName}/results/1/races.json`).pipe(map(res => {\n        const races = res['MRData'].RaceTable.Races;\n        const lastRace = races.pop().raceName;\n        return lastRace;\n      }));\n    }\n\n  }\n\n  WorldChampionsService.ɵfac = function WorldChampionsService_Factory(t) {\n    return new (t || WorldChampionsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WorldChampionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorldChampionsService,\n    factory: WorldChampionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return WorldChampionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}